/*** OrangeAscenceur*   plugin jquery** Exemple HTML :*   <div class="to-scroll">contenu scrollable</div>** Code JS :*   $('.to-scroll').OrangeAscenceur();** Le code HTML sera transformé en cela :*   <div class="scrollbarbox">*       <div class="to-scroll">contenu scrollable</div>*       <div class="orange-scrollbar">*           <div class="up">up label</div><div class="cage-ascenceur"><div class="ascenceur"></div></div><div class="down">down label</div>*       </div>*   </div>** Options :*   contentHeight: integer, la hauteur du contenu scrollable (pas la hauteur visible du bloc scrollable, la hauteur de son contenu)*   step: integer, lors des clicks sur les boutons up et down, définit de combien de pixels le contenu doit scroller (default: 16)*   upLabel: string, le label du bouton up (default: 'Up')*   downLabel: string, le label du bouton down (default: 'Down')*   cssClass: string, une ou plusieurs classes css (séparées par des espaces) qui se rajoute à l'élément div.scrollbarbox (default: null)*/(function($, w, d){        ////////////////////////    // VARIABLES GLOBALES //    ////////////////////////    	        ///////////////////    // PLUGIN OBJECT //    ///////////////////        var OrangeAscenceur=function(params){		$.extend(this, params || {});		this.init();	};        OrangeAscenceur.prototype = {                ///////////////        // VARIABLES //        ///////////////                $target: null,        $scrollbar: null,        $cageAscenceur: null,        $ascenceur: null,        $upButton: null,        $downButton: null,        maxTopPosition: 0,        ascenceurHeight: 0,        cageAscenceurHeight: 0,        contentHeight: 0,        realHeight: 0,        step: 16,        ascenceurIsPressed: false,        upLabel: '^',        downLabel: 'v',        cssClass: null,        position: 'inner',                ///////////////////////////        // METHODES D'EVENEMENTS //        ///////////////////////////                        //////////////        // METHODES //        //////////////                init : function() {            this.$target.data('OrangeAscenceur', this);                        // modification du DOM            var rtl = 'left';            if(typeof $('html').attr('dir') != "undefined" && $('html').attr('dir') == 'rtl')            	rtl = 'right';                       this.$scrollbar=$(        		'<div class="orange-scrollbar">'+	        		'<div class="up">' + this.upLabel + '</div>'+	        		'<div class="cage-ascenceur"><div class="ascenceur"></div></div>'+	        		'<div class="down">' + this.downLabel + '</div>'+        		'</div>'            ).css('float', rtl);            this.$target.wrapInner($('<div class="orange-content">').css('float', 'left'))            if(this.$target.children().height()<= this.$target.height()){            	this.$target.children().children().unwrap();            	return;            }                        this.$content=this.$target.children().css('overflow', 'hidden');            this.$target.append(this.$scrollbar);            this.$target.css('overflow', 'hidden');                                    if(this.position=='outer'){            	this.$target.width(Math.round(this.$target.width()+this.$scrollbar.width()))            }                         if(typeof this.cssClass == 'string')                this.$target.addClass(this.cssClass);            	        // initialisation de la scrollbar	        this.$scrollbar.height(this.$target.height());	        var delta = this.$scrollbar.outerHeight(true) - this.$scrollbar.height();	        this.$scrollbar.height(this.$scrollbar.height()-delta);                        // initialisation des boutons up et down            this.$upButton = this.$scrollbar.find('.up');            if(this.upLabel==null || this.$upButton.css('display') == 'none'){            	this.$upButton.remove();            	this.$upButton=null;            }            this.$downButton = this.$scrollbar.find('.down');            if(this.downLabel==null || this.$downButton.css('display') == 'none'){            	this.$downButton.remove();            	this.$downButton=null;            }                        // initialisation de la cage d'ascenceur            this.cageAscenceurHeight = this.$scrollbar.height();                        if(this.$upButton != null)                this.cageAscenceurHeight -= this.$upButton.outerHeight(true);            if(this.$downButton != null)                this.cageAscenceurHeight -= this.$downButton.outerHeight(true);                                    this.$cageAscenceur = this.$scrollbar.find('.cage-ascenceur');            this.$cageAscenceur.height(this.cageAscenceurHeight);                        this.$content.width( Math.round(this.$target.width() - this.$scrollbar.outerWidth(true) ) ) ;            this.$content.height(this.$target.height());                        this.realHeight=this.$content[0].scrollHeight;            this.contentHeight=this.$content.height();                        this.$ascenceur = this.$scrollbar.find('.ascenceur');                        this.ascenceurHeight =  (this.contentHeight * this.cageAscenceurHeight) / this.realHeight;                        this.$ascenceur.height( this.ascenceurHeight );                        this.maxTopPosition = this.cageAscenceurHeight - this.ascenceurHeight;                        this.$cageAscenceur.css('position', 'relative');            this.$ascenceur.css({            	position:'absolute',            	top : 0,            	left : 0            });                            if(this.$ascenceur.outerWidth(true) == 0)                this.$ascenceur.width(  Math.round(this.$cageAscenceur.width()));                        this.$ascenceur.mouseY = false;            this.$ascenceur.originalTopValue = false;            			this.binder();		},                binder : function() {            this.$ascenceur.mousedown($.proxy(this.ascenceurMouseDown, this)).click(function(){return false;});            this.$cageAscenceur.click($.proxy(this.cageAscenceurClick, this));            this.$content.mousewheel($.proxy(this.mouseWheel, this));                        this.$content.focusin($.proxy(this.update, this));                        if(this.$upButton != null)                this.$upButton.click($.proxy(this.upButtonClick, this));            if(this.$downButton != null)                this.$downButton.click($.proxy(this.downButtonClick, this));                    },                /**        * Click sur le bouton Up        */        upButtonClick: function(event) {            var pourcent = this.step / (this.realHeight - this.contentHeight);            var topValue = this.$ascenceur.position().top - (this.maxTopPosition * pourcent);            if(topValue < 0)                topValue = 0;            this.$ascenceur.css('top', topValue);            this.makeScroll();            return false;        },                /**        * Click sur le bouton Down        */        downButtonClick: function(event) {            var pourcent = this.step / (this.realHeight - this.contentHeight);            var topValue = this.$ascenceur.position().top + (this.maxTopPosition * pourcent);            if(topValue > this.maxTopPosition)                topValue = this.maxTopPosition;            this.$ascenceur.css('top', topValue);            this.makeScroll();            return false;        },                /**        * Click dans la cage d'ascenceur        */        cageAscenceurClick: function(event) {            if(event.layerY > (this.$ascenceur.outerHeight() + this.$ascenceur.position().top) ) {                var topValue = this.$ascenceur.outerHeight() + this.$ascenceur.position().top;                if(topValue > this.maxTopPosition)                    topValue = this.maxTopPosition;                this.$ascenceur.css('top', topValue);                this.makeScroll();            } else {                var topValue = this.$ascenceur.position().top - this.$ascenceur.outerHeight();                if(topValue < 0)                    topValue = 0;                this.$ascenceur.css('top', topValue);                this.makeScroll();            }            return false;        },                /**        * Click maintenu sur l'ascenceur        */        ascenceurMouseDown: function(event) {            this.ascenceurIsPressed = true;                        // on binde les évènements mouseup sur le document (pour prendre en compte le relâchement du bouton de la souris)            // et mousemove sur le document (pour pouvoir prendre en compte les mouvements de la souris pour le drag'n drop de l'ascenceur)            $(d).mouseup($.proxy(this.documentMouseUp, this));            $(d).mousemove($.proxy(this.documentMouseMove, this));                    },                documentMouseMove: function(event) {            if(this.ascenceurIsPressed) {                if(typeof this.$ascenceur.mouseY == 'boolean')                    this.$ascenceur.mouseY = event.pageY;                                if(typeof this.$ascenceur.originalTopValue == 'boolean')                    this.$ascenceur.originalTopValue = this.$ascenceur.position().top;                                    // calcul de la nouvelle position verticale de l'ascenceur                var topValue = 0;                topValue = event.pageY - this.$ascenceur.mouseY + this.$ascenceur.originalTopValue;                if(topValue < 0)                     topValue = 0;                if(topValue > this.maxTopPosition)                    topValue = this.maxTopPosition;                this.$ascenceur.css('top', topValue);                this.makeScroll();                            } else {                this.$ascenceur.mouseY = false;                this.$ascenceur.originalTopValue = false;            }        },                documentMouseUp: function(event) {                    $(d).unbind("mousemove", $.proxy(this.documentMouseMove, this));            $(d).unbind("mouseup", $.proxy(this.documentMouseUp, this));                        this.ascenceurIsPressed = false;                        if (w.getSelection) {                if (w.getSelection().empty)  // Chrome                    w.getSelection().empty();                else if (w.getSelection().removeAllRanges)  // Firefox                    w.getSelection().removeAllRanges();            } else if (d.selection) // IE?                d.selection.empty();                    },                mouseWheel: function(event, delta, deltaX, deltaY) {            this.$content.scrollTop(this.$content.scrollTop() - (delta * (this.step / 2)));            this.update();            return false;        },                        /**        * Pour faire scroller le contenu scrollable en fonction de la position de l'ascenceur        */        makeScroll: function() {            var pourcent = this.$ascenceur.position().top / this.maxTopPosition;            var scroll = (this.realHeight - this.contentHeight) * pourcent;            this.$content.scrollTop(scroll);        },                update:function(){        	if(this.realHeight - this.contentHeight < this.$content.scrollTop())        		return false;            var pourcent = this.$content.scrollTop() / (this.realHeight - this.contentHeight);            this.$ascenceur.css('top', this.maxTopPosition * pourcent);        }            }        $.fn.OrangeAscenceur=function(params) {        if(this.length == 1)            return new OrangeAscenceur($.extend(params || {}, {$target : $(this[0])}));        		for(var i = 0 ; i < this.length ; i++)			new OrangeAscenceur($.extend(params || {}, {$target : $(this[i])}));		return this;	};    })(jQuery, window, document)